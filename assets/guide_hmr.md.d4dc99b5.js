import{o as e,c as t,d as i}from"./app.8b9f0c66.js";const l='{"title":"HMR","description":"","frontmatter":{},"relativePath":"guide/hmr.md","lastUpdated":1615505531008}',a={},s=i('<h1 id="hmr"><a class="header-anchor" href="#hmr" aria-hidden="true">#</a> HMR</h1><p>Thanks to VueJS/ViteJS, <strong>TroisJS use watchers and HMR to update ThreeJS objects when you update a template</strong>. This means the result in your browser will be automatically updated without reloading all the stuff. <strong>This is really helpful when you are creating a TroisJS Scene</strong>.</p><ul><li>[ ] HMR <ul><li>[x] Scene : add or remove objects (lights, meshes)</li><li>[x] PerspectiveCamera : aspect, far, fov, near, position</li><li>[x] Light : castShadow, color, intensity, position, target <ul><li>[x] SpotLight : angle, decay, distance, penumbra</li><li>[ ] ...</li></ul></li><li>[x] Material : color, depthTest, depthWrite, fog, opacity, transparent <ul><li>[x] StandardMaterial : emissive, emissiveIntensity, metalness, roughness</li><li>[ ] ...</li></ul></li><li>[x] Mesh : materialId, position, rotation, scale, castShadow, receiveShadow <ul><li>[x] Box (geometry replace) : size, width, height, depth</li><li>[x] Plane (geometry replace) : width, height, widthSegments, heightSegments</li><li>[x] Sphere (geometry replace) : radius, widthSegments, heightSegments</li><li>[x] Text (geometry replace) : all props except fontSrc (wip)</li><li>[ ] ...</li></ul></li><li>[ ] PostProcessing <ul><li>[x] BokehPass : focus, aperture, maxblur</li><li>[x] FilmPass : noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale</li><li>[x] HalftonePass : shape, radius, rotateR, rotateG, rotateB, scatter</li><li>[x] UnrealBloomPass : strength, radius, threshold</li><li>[ ] ...</li></ul></li><li>[ ] ...</li></ul></li></ul>',3);a.render=function(i,l,a,r,o,n){return e(),t("div",null,[s])};export default a;export{l as __pageData};
