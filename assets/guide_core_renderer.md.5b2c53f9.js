import{o as e,c as t,d as n}from"./app.c4cbb42c.js";const s='{"title":"Renderer","description":"","frontmatter":{},"headers":[{"level":2,"title":"Props from THREE.WebGLRenderer","slug":"props-from-three-webglrenderer"},{"level":2,"title":"Custom Props","slug":"custom-props"},{"level":2,"title":"Events API (v0.3)","slug":"events-api-v0-3"},{"level":2,"title":"Custom render function","slug":"custom-render-function"},{"level":2,"title":"Access ThreeJS renderer","slug":"access-threejs-renderer"},{"level":2,"title":"Access ThreeJS OrbitControls","slug":"access-threejs-orbitcontrols"},{"level":3,"title":"Events","slug":"events"},{"level":3,"title":"Properties, Methods","slug":"properties-methods"}],"relativePath":"guide/core/renderer.md","lastUpdated":1633525509704}',a={},o=n('<h1 id="renderer"><a class="header-anchor" href="#renderer" aria-hidden="true">#</a> Renderer</h1><p>See <a href="https://github.com/troisjs/trois/blob/master/src/core/Renderer.ts" target="_blank" rel="noopener noreferrer">Renderer.ts</a> and <a href="https://threejs.org/docs/#api/en/renderers/WebGLRenderer" target="_blank" rel="noopener noreferrer">THREE.WebGLRenderer</a>.</p><h2 id="props-from-three-webglrenderer"><a class="header-anchor" href="#props-from-three-webglrenderer" aria-hidden="true">#</a> Props from <code>THREE.WebGLRenderer</code></h2><table><tbody><tr><th>Name</th><th>Description</th><th>Type</th><th>Default</th></tr><tr><td><code>alpha</code></td><td>Whether the canvas contains an alpha (transparency) buffer or not.</td><td>Boolean</td><td>false</td></tr><tr><td><code>antialias</code></td><td>Whether to perform antialiasing.</td><td>Boolean</td><td>false</td></tr><tr><td><code>autoClear</code></td><td>Defines whether the renderer should automatically clear its output before rendering a frame.</td><td>Boolean</td><td>true</td></tr></tbody></table><h2 id="custom-props"><a class="header-anchor" href="#custom-props" aria-hidden="true">#</a> Custom Props</h2><table><tbody><tr><th>Name</th><th>Description</th><th>Type</th><th>Default</th></tr><tr><td><code>orbitCtrl</code></td><td>Enable/disable OrbitControls. If value is an Object, it will be used to configure [OrbitControls](#access-threejs-orbitcontrols).</td><td>Boolean, Object</td><td>false</td></tr><tr><td><code>pointer</code></td><td> Listen for pointer events to track mouse or touch positions (2D and 3D). Use <code>renderer.three.pointer</code> to get : <ul><li><code>position</code> : 2D position.</li><li><code>positionN</code> : nomalized position, can be used for raycasting.</li><li><code>&#39;positionV3&#39;</code> : 3D position.</li></ul></td><td>Boolean, Object</td><td>false</td></tr><tr><td><code>resize</code></td><td> Resize canvas on window resize. <ul><li><code>false</code> : disabled</li><li><code>true</code> : parent size</li><li><code>&#39;window&#39;</code> : window size</li></ul> To directly set the size of the renderer you can call the built in three function: <code>this.$refs.renderer.three.setSize(width, height)</code></td><td>Boolean, String</td><td>false</td></tr><tr><td><code>shadow</code></td><td>Use shadow or not.</td><td>Boolean</td><td>false</td></tr><tr><td><code>width</code></td><td>Fixed width</td><td>Number</td><td></td></tr><tr><td><code>height</code></td><td>Fixed height</td><td>Number</td><td></td></tr></tbody></table><h2 id="events-api-v0-3"><a class="header-anchor" href="#events-api-v0-3" aria-hidden="true">#</a> Events API (v0.3)</h2><p>You can use the following functions to add/remove event listeners on Renderer component :</p><table><tbody><tr><th>Name</th><th>Description</th><th>Event </th></tr><tr><td><code>onInit</code></td><td>Add <em>init</em> listener</td><td><code>{ type: &#39;init&#39;, renderer }</code></td></tr><tr><td><code>onMounted</code></td><td>Add <em>mounted</em> listener</td><td><code>{ type: &#39;mounted&#39;, renderer }</code></td></tr><tr><td><code>onResize</code></td><td>Add <em>resize</em> listener</td><td><code>{ type: &#39;init&#39;, renderer, size }</code></td></tr><tr><td><code>onBeforeRender</code></td><td>Add <em>beforerender</em> listener</td><td><code>{ type: &#39;beforerender&#39;, renderer, time }</code></td></tr><tr><td><code>offBeforeRender</code></td><td>Remove <em>beforerender</em> listener</td><td></td></tr><tr><td><code>onAfterRender</code></td><td>Add <em>afterrender</em> listener</td><td><code>{ type: &#39;afterrender&#39;, renderer, time }</code></td></tr><tr><td><code>offAfterRender</code></td><td>Remove <em>afterrender</em> listener</td><td></td></tr></tbody></table><p>You can also use :</p><table><tbody><tr><th>Name</th><th>Description</th></tr><tr><td><code>addListener(type, callback)</code></td><td>Add event listener</td></tr><tr><td><code>removeListener(type, callback)</code></td><td>Remove event listener</td></tr></tbody></table><h2 id="custom-render-function"><a class="header-anchor" href="#custom-render-function" aria-hidden="true">#</a> Custom render function</h2><p>You can use a custom render function :</p><div class="language-js"><pre><code><span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>renderer\nrenderer<span class="token punctuation">.</span><span class="token function">onInit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  renderer<span class="token punctuation">.</span><span class="token function-variable function">renderFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// do what you want</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="access-threejs-renderer"><a class="header-anchor" href="#access-threejs-renderer" aria-hidden="true">#</a> Access ThreeJS renderer</h2><p>You should set a <em>ref</em> on the renderer :</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Renderer</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>renderer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Renderer</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>You can then access ThreeJS renderer in your component script :</p><div class="language-js"><pre><code><span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$ref<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>renderer<span class="token punctuation">;</span>\n</code></pre></div><h2 id="access-threejs-orbitcontrols"><a class="header-anchor" href="#access-threejs-orbitcontrols" aria-hidden="true">#</a> Access ThreeJS OrbitControls</h2><p>In the same fashion you can access the renderer&#39;s <code>three</code> object which contains different functions to control the scene, amongst which is <code>cameraCtrl</code>, handling the ThreeJS <code>OrbitControls</code> settings</p><div class="language-js"><pre><code><span class="token keyword">const</span> orbitCtrl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$ref<span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>three<span class="token punctuation">.</span>cameraCtrl<span class="token punctuation">;</span>\n</code></pre></div><h3 id="events"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h3><p>To use events, apply an event listener in <code>mounted()</code> section of your App.</p><div class="language-js"><pre><code>\norbitCtrl<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Do something when the camera has been transformed by the controls.</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\norbitCtrl<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Do something when an interaction was initiated.</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\norbitCtrl<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Do something when an interaction has finished.</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre></div><h3 id="properties-methods"><a class="header-anchor" href="#properties-methods" aria-hidden="true">#</a> Properties, Methods</h3><p>You can apply all properties and methods in the same way as listed in the official <a href="https://threejs.org/docs/?q=orbit#examples/en/controls/OrbitControls" target="_blank" rel="noopener noreferrer">ThreeJS docs</a></p><p>Example:</p><div class="language-js"><pre><code>orbitCtrl<span class="token punctuation">.</span>enablePan <span class="token operator">=</span> <span class="token boolean">false</span>\n</code></pre></div>',29);a.render=function(n,s,a,r,d,c){return e(),t("div",null,[o])};export default a;export{s as __pageData};
