import{Y as e,P as t,V as r,W as s,S as i,b3 as n,M as o,N as a,b as h,R as l,n as u,x as d,aY as f,b1 as m,al as p}from"./OrbitControls.ff4e990f.js";import{t as c}from"./tweakpane.32a3b2b5.js";import{n as v,x as g,r as x,o as y,c as D,w as M,b as w}from"./app.9cd399cc.js";import{A as b,a as S,c as C,d as U,S as q}from"./trois.module.45730f49.js";import{O as F}from"./Object3D.81356ed7.js";import{a as H}from"./tools.53586591.js";function E(e){this.renderer=e,this.width=512,this.height=512,this.delta=new r(1/this.width,1/this.height);const t={minFilter:a,magFilter:a,type:h,format:l,depthBuffer:!1};this.hMap=new s(this.width,this.height,t),this.hMap1=new s(this.width,this.height,t),this.fsQuad=new P,this.initShaders()}E.prototype.initShaders=function(){const e="\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ";this.copyMat=new i({uniforms:{tDiffuse:{value:null}},vertexShader:e,fragmentShader:"\n      uniform sampler2D tDiffuse;\n      varying vec2 vUv;\n      void main() {\n        gl_FragColor = texture2D(tDiffuse, vUv);\n      }\n    "}),this.updateMat=new i({uniforms:{tDiffuse:{value:null},delta:new n(this.delta)},vertexShader:e,fragmentShader:"\n      uniform sampler2D tDiffuse;\n      uniform vec2 delta;\n      varying vec2 vUv;\n      void main() {\n        vec4 texel = texture2D(tDiffuse, vUv);\n\n        vec2 dx = vec2(delta.x, 0.0);\n        vec2 dy = vec2(0.0, delta.y);\n        float average = (\n          texture2D(tDiffuse, vUv - dx).r +\n          texture2D(tDiffuse, vUv - dy).r +\n          texture2D(tDiffuse, vUv + dx).r +\n          texture2D(tDiffuse, vUv + dy).r\n        ) * 0.25;\n        texel.g += (average - texel.r) * 2.0;\n        texel.g *= 0.995;\n        texel.r += texel.g;\n\n        gl_FragColor = texel;\n      }\n    "}),this.normalsMat=new i({uniforms:{tDiffuse:{value:null},delta:new n(this.delta)},vertexShader:e,fragmentShader:"\n      uniform sampler2D tDiffuse;\n      uniform vec2 delta;\n      varying vec2 vUv;\n      void main() {\n        vec4 texel = texture2D(tDiffuse, vUv);\n        vec3 dx = vec3(delta.x, texture2D(tDiffuse, vec2(vUv.x + delta.x, vUv.y)).r - texel.r, 0.0);\n        vec3 dy = vec3(0.0, texture2D(tDiffuse, vec2(vUv.x, vUv.y + delta.y)).r - texel.r, delta.y);\n        texel.ba = normalize(cross(dy, dx)).xz;\n        gl_FragColor = texel;\n      }\n    "}),this.dropMat=new i({uniforms:{tDiffuse:{value:null},center:new n(new r),radius:{value:.05},strength:{value:.5}},vertexShader:e,fragmentShader:"\n      const float PI = 3.1415926535897932384626433832795;\n      uniform sampler2D tDiffuse;\n      uniform vec2 center;\n      uniform float radius;\n      uniform float strength;\n      varying vec2 vUv;\n      void main() {\n        vec4 texel = texture2D(tDiffuse, vUv);\n        float drop = max(0.0, 1.0 - length(center * 0.5 + 0.5 - vUv) / radius);\n        drop = 0.5 - cos(drop * PI) * 0.5;\n        texel.r += drop * strength;\n        // texel.r = clamp(texel.r, -2.0, 2.0);\n        gl_FragColor = texel;\n      }\n    "})},E.prototype.update=function(){this.updateHMap(),this.updateHMapNormals()},E.prototype.updateHMap=function(){this.updateMat.uniforms.tDiffuse.value=this.hMap.texture,this.renderShaderMat(this.updateMat,this.hMap1),this.swapBuffers()},E.prototype.updateHMapNormals=function(){this.normalsMat.uniforms.tDiffuse.value=this.hMap.texture,this.renderShaderMat(this.normalsMat,this.hMap1),this.swapBuffers()},E.prototype.addDrop=function(e,t,r,s){this.dropMat.uniforms.tDiffuse.value=this.hMap.texture,this.dropMat.uniforms.center.value.set(e,t),this.dropMat.uniforms.radius.value=r,this.dropMat.uniforms.strength.value=s,this.renderShaderMat(this.dropMat,this.hMap1),this.swapBuffers()},E.prototype.renderShaderMat=function(e,t){this.fsQuad.material=e;const r=this.renderer.getRenderTarget();this.renderer.setRenderTarget(t),this.fsQuad.render(this.renderer),this.renderer.setRenderTarget(r)},E.prototype.swapBuffers=function(){const e=this.hMap;this.hMap=this.hMap1,this.hMap1=e};const P=function(){const r=new e(-1,1,1,-1,0,1),s=new t(2,2),i=function(e){this._mesh=new o(s,e)};return Object.defineProperty(i.prototype,"material",{get:function(){return this._mesh.material},set:function(e){this._mesh.material=e}}),Object.assign(i.prototype,{render:function(e){e.render(this._mesh,r)}}),i}();const _={components:{AmbientLight:b,Camera:S,LiquidPlane:{extends:F,props:{width:{type:Number,default:10},height:{type:Number,default:10},widthSegments:{type:Number,default:200},heightSegments:{type:Number,default:200},color:{type:[Number,String],default:"#ffffff"},metalness:{type:Number,default:.75},roughness:{type:Number,default:.25}},mounted(){this.liquidEffect=new E(this.three.renderer),this.rendererComponent.onMounted((()=>{this.liquidEffect.renderer=this.rendererComponent.renderer,this.three.onBeforeRender(this.update)})),this.material=new u({color:this.color,side:d,metalness:this.metalness,roughness:this.roughness,onBeforeCompile:e=>{e.uniforms.hmap={value:this.liquidEffect.hMap.texture},e.vertexShader="uniform sampler2D hmap;\n"+e.vertexShader;e.vertexShader=e.vertexShader.replace("#include <begin_vertex>","\n          vec3 transformed = vec3(position);\n          vec4 info = texture2D(hmap, uv);\n          vNormal = vec3(info.b, sqrt(1.0 - dot(info.ba, info.ba)), info.a).xzy;\n          transformed.z = 20. * info.r;\n        ")}}),H(this,["metalness","roughness"],this.material),v((()=>this.color),(e=>this.material.color.set(e))),this.geometry=new t(this.width,this.height,this.widthSegments,this.heightSegments),this.mesh=new o(this.geometry,this.material),this.initObject3D(this.mesh)},unmounted(){this.three.offBeforeRender(this.update)},methods:{update(){this.liquidEffect.update()}}},PointLight:C,Renderer:U,Scene:q},setup:()=>({WIDTH:30,HEIGHT:30}),data:()=>({color:"#ffffff",metalness:1,roughness:.2,light1Color:"#FFFF80",light2Color:"#DE3578",light3Color:"#FF4040",light4Color:"#0d25bb"}),mounted(){this.mouse=this.$refs.renderer.three.mouse,this.liquidEffect=this.$refs.liquid.liquidEffect,this.liquidEffect.addDrop(0,0,.05,.05),this.raycaster=new f,this.mousePlane=new m(new p(0,0,1),0),this.mouseV3=new p,this.pane=new c,this.pane.addInput(this,"color"),this.pane.addInput(this,"metalness",{min:0,max:1}),this.pane.addInput(this,"roughness",{min:0,max:1}),this.pane.addButton({title:"Random lights"}).on("click",this.randomColors)},unmounted(){this.pane.dispose()},methods:{onMouseMove(){this.raycaster.setFromCamera(this.mouse,this.$refs.renderer.three.camera),this.raycaster.ray.intersectPlane(this.mousePlane,this.mouseV3);const e=2*this.mouseV3.x/this.WIDTH,t=2*this.mouseV3.y/this.HEIGHT;this.liquidEffect.addDrop(e,t,.025,.005)},randomColors(){this.light1Color=g.random().hex(),this.light2Color=g.random().hex(),this.light3Color=g.random().hex(),this.light4Color=g.random().hex()}}};_.render=function(e,t,r,s,i,n){const o=x("Camera"),a=x("AmbientLight"),h=x("PointLight"),l=x("LiquidPlane"),u=x("Scene"),d=x("Renderer");return y(),D(d,{ref:"renderer",antialias:"","mouse-move":"",resize:"","orbit-ctrl":{enableDamping:!0},onMousemove:n.onMouseMove},{default:M((()=>[w(o,{position:{x:0,y:0,z:20}}),w(u,{ref:"scene"},{default:M((()=>[w(a),w(h,{color:i.light1Color,position:{x:50,y:50,z:50}},null,8,["color"]),w(h,{color:i.light2Color,position:{x:-50,y:50,z:50}},null,8,["color"]),w(h,{color:i.light3Color,position:{x:-50,y:-50,z:50}},null,8,["color"]),w(h,{color:i.light4Color,position:{x:50,y:-50,z:50}},null,8,["color"]),w(l,{ref:"liquid",width:s.WIDTH,height:s.HEIGHT,"width-segments":512,"height-segments":512,color:i.color,metalness:i.metalness,roughness:i.roughness},null,8,["width","height","color","metalness","roughness"])])),_:1},512)])),_:1},8,["onMousemove"])};export default _;
