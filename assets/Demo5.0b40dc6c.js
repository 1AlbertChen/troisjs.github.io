import{bi as t,a3 as e}from"./OrbitControls.94891aa4.js";import{A as s,B as i,a,E as r,F as n,I as o,e as h,c as d,R as l,f as m,S as u,j as f}from"./trois.module.2e8c671e.js";import{s as p}from"./simplex-noise.15c7488f.js";import{r as c,o as y,c as I,w as N,b as P}from"./app.efb59aa7.js";const A=new p,S={components:{AmbientLight:s,BoxGeometry:i,Camera:a,EffectComposer:r,FXAAPass:n,InstancedMesh:o,PhongMaterial:h,PointLight:d,Renderer:l,RenderPass:m,Scene:u,TiltShiftPass:f},setup:()=>({SIZE:1.6,NX:25,NY:25,PADDING:1,SIZEP:2.6,W:64,H:64,NUM_INSTANCES:625}),data:()=>({tiltRadius:100,tiltY:100}),computed:{tiltStart(){return{x:0,y:this.tiltY}},tiltEnd(){return{x:100,y:this.tiltY}}},mounted(){this.renderer=this.$refs.renderer,this.size=this.renderer.three.size,this.imesh=this.$refs.imesh.mesh;const s=[];for(let t=0;t<this.NUM_INSTANCES;t++){const t=Math.random();s.push(t,t,t)}this.imesh.geometry.setAttribute("color",new t(new Float32Array(s),3)),this.tiltRadius=this.size.height/3,this.tiltY=this.size.height/2,this.renderer.onAfterResize(this.updateTilt),this.dummy=new e,this.renderer.onBeforeRender(this.animate)},methods:{animate(){this.updateInstanceMatrix()},updateTilt({positionN:t}){this.tiltRadius=this.size.height/3,this.tiltY=.5*(t.y+1)*this.size.height},updateInstanceMatrix(){const t=-this.W/2+this.PADDING,e=-this.H/2+this.PADDING,s=1e-4*Date.now();let i,a,r,n,o,h;for(let d=0;d<this.NX;d++)for(let l=0;l<this.NY;l++)i=t+d*this.SIZEP,a=e+l*this.SIZEP,r=.005*i,n=.005*a,o=A.noise3D(r,n,s)*Math.PI,h=A.noise3D(n,r,s)*Math.PI,this.dummy.position.set(i,a,-10),this.dummy.rotation.set(o,h,0),this.dummy.updateMatrix(),this.imesh.setMatrixAt(d*this.NY+l,this.dummy.matrix);this.imesh.instanceMatrix.needsUpdate=!0}}};S.render=function(t,e,s,i,a,r){const n=c("Camera"),o=c("AmbientLight"),h=c("PointLight"),d=c("BoxGeometry"),l=c("PhongMaterial"),m=c("InstancedMesh"),u=c("Scene"),f=c("RenderPass"),p=c("FXAAPass"),A=c("TiltShiftPass"),S=c("EffectComposer"),x=c("Renderer");return y(),I(x,{ref:"renderer",resize:"",pointer:{onMove:r.updateTilt}},{default:N((()=>[P(n,{position:{y:-20,z:10},"look-at":{x:0,y:0,z:0}}),P(u,{background:"#ffffff"},{default:N((()=>[P(o),P(h,{ref:"light",position:{y:0,z:20}},null,512),P(m,{ref:"imesh",count:i.NUM_INSTANCES,position:{y:20,z:10}},{default:N((()=>[P(d,{size:i.SIZE},null,8,["size"]),P(l,{"vertex-colors":""})])),_:1},8,["count"])])),_:1}),P(S,null,{default:N((()=>[P(f),P(p),P(A,{"gradient-radius":a.tiltRadius,start:{x:0,y:this.tiltY},end:{x:100,y:this.tiltY}},null,8,["gradient-radius","start","end"])])),_:1})])),_:1},8,["pointer"])};export default S;
