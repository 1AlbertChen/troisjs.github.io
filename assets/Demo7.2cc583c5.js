import{Y as e,P as t,V as r,W as s,b as i,R as n,S as o,b3 as a,M as h,n as l,x as u,a_ as f,b1 as d,al as m}from"./OrbitControls.6cc836dc.js";import{t as p}from"./tweakpane.25a25f83.js";import{n as c,x as v,r as g,o as x,c as y,w as D,b as M}from"./app.20352acf.js";import{A as w,a as b,D as S,m as C,n as U,c as H,d as q,f as B,S as P}from"./trois.module.0417385f.js";import{O as _}from"./Object3D.e25e05fc.js";import{a as E}from"./tools.2598387b.js";function F(e){this.renderer=e,this.width=512,this.height=512,this.delta=new r(1/this.width,1/this.height),this.hMap=new s(this.width,this.height,{type:i,format:n,depthBuffer:!1,stencilBuffer:!1}),this.hMap1=new s(this.width,this.height,{type:i,format:n,depthBuffer:!1,stencilBuffer:!1}),this.fsQuad=new j,this.initShaders()}F.prototype.initShaders=function(){const e="\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ";this.copyMat=new o({uniforms:{tDiffuse:{value:null}},vertexShader:e,fragmentShader:"\n      uniform sampler2D tDiffuse;\n      varying vec2 vUv;\n      void main() {\n        gl_FragColor = texture2D(tDiffuse, vUv);\n      }\n    "}),this.updateMat=new o({uniforms:{tDiffuse:{value:null},delta:new a(this.delta)},vertexShader:e,fragmentShader:"\n      uniform sampler2D tDiffuse;\n      uniform vec2 delta;\n      varying vec2 vUv;\n      void main() {\n        vec4 texel = texture2D(tDiffuse, vUv);\n\n        vec2 dx = vec2(delta.x, 0.0);\n        vec2 dy = vec2(0.0, delta.y);\n        float average = (\n          texture2D(tDiffuse, vUv - dx).r +\n          texture2D(tDiffuse, vUv - dy).r +\n          texture2D(tDiffuse, vUv + dx).r +\n          texture2D(tDiffuse, vUv + dy).r\n        ) * 0.25;\n        texel.g += (average - texel.r) * 2.0;\n        texel.g *= 0.995;\n        texel.r += texel.g;\n\n        gl_FragColor = texel;\n      }\n    "}),this.normalsMat=new o({uniforms:{tDiffuse:{value:null},delta:new a(this.delta)},vertexShader:e,fragmentShader:"\n      uniform sampler2D tDiffuse;\n      uniform vec2 delta;\n      varying vec2 vUv;\n      void main() {\n        vec4 texel = texture2D(tDiffuse, vUv);\n        vec3 dx = vec3(delta.x, texture2D(tDiffuse, vec2(vUv.x + delta.x, vUv.y)).r - texel.r, 0.0);\n        vec3 dy = vec3(0.0, texture2D(tDiffuse, vec2(vUv.x, vUv.y + delta.y)).r - texel.r, delta.y);\n        texel.ba = normalize(cross(dy, dx)).xz;\n        gl_FragColor = texel;\n      }\n    "}),this.dropMat=new o({uniforms:{tDiffuse:{value:null},center:new a(new r),radius:{value:.05},strength:{value:.5}},vertexShader:e,fragmentShader:"\n      const float PI = 3.1415926535897932384626433832795;\n      uniform sampler2D tDiffuse;\n      uniform vec2 center;\n      uniform float radius;\n      uniform float strength;\n      varying vec2 vUv;\n      void main() {\n        vec4 texel = texture2D(tDiffuse, vUv);\n        float drop = max(0.0, 1.0 - length(center * 0.5 + 0.5 - vUv) / radius);\n        drop = 0.5 - cos(drop * PI) * 0.5;\n        texel.r += drop * strength;\n        // texel.r = clamp(texel.r, -2.0, 2.0);\n        gl_FragColor = texel;\n      }\n    "})},F.prototype.update=function(){this.updateHMap(),this.updateHMapNormals()},F.prototype.updateHMap=function(){this.updateMat.uniforms.tDiffuse.value=this.hMap.texture,this.renderShaderMat(this.updateMat,this.hMap1),this.swapBuffers()},F.prototype.updateHMapNormals=function(){this.normalsMat.uniforms.tDiffuse.value=this.hMap.texture,this.renderShaderMat(this.normalsMat,this.hMap1),this.swapBuffers()},F.prototype.addDrop=function(e,t,r,s){this.dropMat.uniforms.tDiffuse.value=this.hMap.texture,this.dropMat.uniforms.center.value.set(e,t),this.dropMat.uniforms.radius.value=r,this.dropMat.uniforms.strength.value=s,this.renderShaderMat(this.dropMat,this.hMap1),this.swapBuffers()},F.prototype.renderBuffer=function(e,t){this.copyMat.uniforms.tDiffuse.value=e.texture,this.renderShaderMat(this.copyMat,t)},F.prototype.renderShaderMat=function(e,t){this.fsQuad.material=e;const r=this.renderer.getRenderTarget();this.renderer.setRenderTarget(t),this.fsQuad.render(this.renderer),this.renderer.setRenderTarget(r)},F.prototype.swapBuffers=function(){const e=this.hMap;this.hMap=this.hMap1,this.hMap1=e};const j=function(){const r=new e(-1,1,1,-1,0,1),s=new t(2,2),i=function(e){this._mesh=new h(s,e)};return Object.defineProperty(i.prototype,"material",{get:function(){return this._mesh.material},set:function(e){this._mesh.material=e}}),Object.assign(i.prototype,{render:function(e){e.render(this._mesh,r)}}),i}();const I={components:{AmbientLight:w,Camera:b,DirectionalLight:S,FBXModel:C,HemisphereLight:U,LiquidPlane:{extends:_,props:{width:{type:Number,default:10},height:{type:Number,default:10},widthSegments:{type:Number,default:200},heightSegments:{type:Number,default:200},color:{type:[Number,String],default:"#ffffff"},metalness:{type:Number,default:.75},roughness:{type:Number,default:.25}},mounted(){this.liquidEffect=new F(this.three.renderer),this.rendererComponent.onMounted((()=>{this.liquidEffect.renderer=this.rendererComponent.renderer,this.three.onBeforeRender((()=>{this.liquidEffect.update()}))})),this.material=new l({color:this.color,side:u,metalness:this.metalness,roughness:this.roughness,onBeforeCompile:e=>{e.uniforms.hmap={value:this.liquidEffect.hMap.texture},e.vertexShader="uniform sampler2D hmap;\n"+e.vertexShader;e.vertexShader=e.vertexShader.replace("#include <begin_vertex>","\n          vec3 transformed = vec3(position);\n          vec4 info = texture2D(hmap, uv);\n          vNormal = vec3(info.b, sqrt(1.0 - dot(info.ba, info.ba)), info.a).xzy;\n          transformed.z = 20. * info.r;\n        ")}}),E(this,["metalness","roughness"],this.material),c((()=>this.color),(e=>this.material.color.set(e))),this.geometry=new t(this.width,this.height,this.widthSegments,this.heightSegments),this.mesh=new h(this.geometry,this.material),this.initObject3D(this.mesh)}},PointLight:H,Renderer:q,PhongMaterial:B,Scene:P},setup:()=>({WIDTH:30,HEIGHT:30}),data:()=>({color:"#ffffff",metalness:1,roughness:.2,light1Color:"#FFFF80",light2Color:"#DE3578",light3Color:"#FF4040",light4Color:"#0d25bb"}),mounted(){this.mouse=this.$refs.renderer.three.mouse,this.liquidEffect=this.$refs.liquid.liquidEffect,this.liquidEffect.addDrop(0,0,.05,.05),this.raycaster=new f,this.mousePlane=new d(new m(0,0,1),0),this.mouseV3=new m,this.pane=new p,this.pane.addInput(this,"color"),this.pane.addInput(this,"metalness",{min:0,max:1}),this.pane.addInput(this,"roughness",{min:0,max:1}),this.pane.addButton({title:"Random lights"}).on("click",this.randomColors)},unmounted(){this.pane.dispose()},methods:{onMouseMove(){this.raycaster.setFromCamera(this.mouse,this.$refs.renderer.three.camera),this.raycaster.ray.intersectPlane(this.mousePlane,this.mouseV3);const e=2*this.mouseV3.x/this.WIDTH,t=2*this.mouseV3.y/this.HEIGHT;this.liquidEffect.addDrop(e,t,.025,.005)},randomColors(){this.light1Color=v.random().hex(),this.light2Color=v.random().hex(),this.light3Color=v.random().hex(),this.light4Color=v.random().hex()}}};I.render=function(e,t,r,s,i,n){const o=g("Camera"),a=g("AmbientLight"),h=g("PointLight"),l=g("LiquidPlane"),u=g("Scene"),f=g("Renderer");return x(),y(f,{ref:"renderer",antialias:"","mouse-move":"",resize:"","orbit-ctrl":{enableDamping:!0},onMousemove:n.onMouseMove},{default:D((()=>[M(o,{position:{x:0,y:0,z:20}}),M(u,{ref:"scene"},{default:D((()=>[M(a),M(h,{color:i.light1Color,position:{x:50,y:50,z:50}},null,8,["color"]),M(h,{color:i.light2Color,position:{x:-50,y:50,z:50}},null,8,["color"]),M(h,{color:i.light3Color,position:{x:-50,y:-50,z:50}},null,8,["color"]),M(h,{color:i.light4Color,position:{x:50,y:-50,z:50}},null,8,["color"]),M(l,{ref:"liquid",width:s.WIDTH,height:s.HEIGHT,"width-segments":512,"height-segments":512,color:i.color,metalness:i.metalness,roughness:i.roughness},null,8,["width","height","color","metalness","roughness"])])),_:1},512)])),_:1},8,["onMousemove"])};export default I;
